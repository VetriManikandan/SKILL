import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Sample data: Square footage of houses and their corresponding prices
# Data format: [Size in sq. ft., Price in USD]
data = np.array([
    [1500, 300000],
    [1800, 350000],
    [2000, 400000],
    [2200, 450000],
    [2500, 500000],
    [3000, 600000],
    [3500, 700000],
    [4000, 800000]
])

# X = Size of house, y = Price
X = data[:, 0].reshape(-1, 1)  # Features (size of house)
y = data[:, 1]  # Target (price)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Predict prices for the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Visualize the results
plt.scatter(X, y, color='blue', label='Real data')
plt.plot(X, model.predict(X), color='red', label='Linear Regression Line')
plt.title("House Price Prediction (Linear Regression)")
plt.xlabel("Size (sq. ft.)")
plt.ylabel("Price (USD)")
plt.legend()
plt.show()

# Example prediction
size = 2800  # sq. ft.
predicted_price = model.predict([[size]])
print(f"Predicted price for a {size} sq. ft. house: ${predicted_price[0]:,.2f}")
